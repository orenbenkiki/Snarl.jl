!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!Julia	Y,unknown	/name defined in other modules/
!_TAG_KIND_DESCRIPTION!Julia	c,constant	/Constants/
!_TAG_KIND_DESCRIPTION!Julia	f,function	/Functions/
!_TAG_KIND_DESCRIPTION!Julia	g,field	/Fields/
!_TAG_KIND_DESCRIPTION!Julia	m,macro	/Macros/
!_TAG_KIND_DESCRIPTION!Julia	n,module	/Modules/
!_TAG_KIND_DESCRIPTION!Julia	s,struct	/Structures/
!_TAG_KIND_DESCRIPTION!Julia	t,type	/Types/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!Julia	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/obk/Snarl.jl/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!Julia!module	imported	/loaded by "import"/
!_TAG_ROLE_DESCRIPTION!Julia!module	namespace	/only some symbols in it are imported/
!_TAG_ROLE_DESCRIPTION!Julia!module	used	/loaded by "using"/
!_TAG_ROLE_DESCRIPTION!Julia!unknown	imported	/loaded by "import"/
!_TAG_ROLE_DESCRIPTION!Julia!unknown	used	/loaded by "using"/
ACCUMULATOR	test/control.jl	/^@everywhere const ACCUMULATOR = 2$/;"	c
COUNTERS	test/control.jl	/^const COUNTERS = 3$/;"	c
ContextTrackers	test/control.jl	/^@everywhere mutable struct ContextTrackers$/;"	s
Control	src/control.jl	/^module Control$/;"	n
DistributedChannels	src/distributed_channels.jl	/^module DistributedChannels$/;"	n
DistributedLocks	src/distributed_locks.jl	/^module DistributedLocks$/;"	n
DistributedLogger	src/distributed_logging.jl	/^struct DistributedLogger <: AbstractLogger$/;"	s	module:DistributedLogging
DistributedLogging	src/distributed_logging.jl	/^module DistributedLogging$/;"	n
GlobalStorage	src/storage.jl	/^    function GlobalStorage(;$/;"	f	struct:Storage.GlobalStorage
GlobalStorage	src/storage.jl	/^mutable struct GlobalStorage$/;"	s	module:Storage
Launched	src/launched.jl	/^module Launched$/;"	n
LocalStorage	src/storage.jl	/^    LocalStorage(;$/;"	f	struct:LocalStorage
LocalStorage	src/storage.jl	/^mutable struct LocalStorage$/;"	s
LockRequest	src/distributed_locks.jl	/^struct LockRequest$/;"	s	module:DistributedLocks
LockStatus	src/distributed_locks.jl	/^mutable struct LockStatus$/;"	s
MERGE	test/control.jl	/^@everywhere const MERGE = 3$/;"	c
OperationContext	test/control.jl	/^    OperationContext() = new(myid(), threadid(), next!(UNIQUE), 0)$/;"	f	struct:OperationContext
OperationContext	test/control.jl	/^@everywhere mutable struct OperationContext$/;"	s
ParallelStorage	src/storage.jl	/^    ParallelStorage($/;"	f	struct:ParallelStorage
ParallelStorage	src/storage.jl	/^mutable struct ParallelStorage$/;"	s
SimdFlag	src/control.jl	/^const SimdFlag = Union{Bool,Symbol}$/;"	c	module:Control
Snarl	src/Snarl.jl	/^module Snarl$/;"	n
Storage	src/storage.jl	/^module Storage$/;"	n
ThreadSafeRemoteChannel	src/distributed_channels.jl	/^function ThreadSafeRemoteChannel(remote_channel::RemoteChannel)::ThreadSafeRemoteChannel$/;"	f
ThreadSafeRemoteChannel	src/distributed_channels.jl	/^mutable struct ThreadSafeRemoteChannel{T} <: AbstractChannel{T}$/;"	s	module:DistributedChannels
Trackers	test/control.jl	/^@everywhere mutable struct Trackers$/;"	s
UNIQUE	test/control.jl	/^@everywhere const UNIQUE = 1$/;"	c
add_per_process!	src/storage.jl	/^function add_per_process!($/;"	f
add_per_step!	src/storage.jl	/^function add_per_step!($/;"	f
add_per_thread!	src/storage.jl	/^function add_per_thread!($/;"	f
base_args_contain	test/runtests.jl	/^function base_args_contain(value::AbstractString)$/;"	f
base_time	src/distributed_logging.jl	/^    base_time::Union{Nothing,DateTime}$/;"	g	struct:DistributedLogging.DistributedLogger
batch_values_view	src/control.jl	/^function batch_values_view(values, batch_size::Number, batch_index::Int)::Any$/;"	f	module:Control
batch_values_views	src/control.jl	/^function batch_values_views($/;"	f	module:Control
batches_configuration	src/control.jl	/^function batches_configuration($/;"	f	module:Control
catch_exceptions	src/distributed_logging.jl	/^catch_exceptions(logger::DistributedLogger) = false$/;"	f
check_d_foreach	test/control.jl	/^function check_d_foreach(; expected_used_processes::Int = nprocs(), flags...)::Nothing$/;"	f
check_dt_foreach	test/control.jl	/^function check_dt_foreach(;$/;"	f
check_query_results	test/launch.jl	/^function check_query_results(query_result::Tuple{Int,AbstractArray{Int,1}})::Nothing$/;"	f
check_results	test/control.jl	/^function check_results(results_channel::Channel{Union{Int,Nothing}})::Nothing$/;"	f
check_s_foreach	test/control.jl	/^function check_s_foreach(; flags...)::Nothing$/;"	f
check_same_values	test/control.jl	/^function check_same_values(values::AbstractArray, expected::Any)::Nothing$/;"	f
check_step_used_different_uniques	test/control.jl	/^function check_step_used_different_uniques()::Nothing$/;"	f
check_steps_did_run	test/control.jl	/^function check_steps_did_run()::Nothing$/;"	f
check_steps_used_single_process	test/control.jl	/^function check_steps_used_single_process()::Nothing$/;"	f
check_steps_used_threads_of_single_process	test/control.jl	/^function check_steps_used_threads_of_single_process(expected_used_threads::Int)::Nothing$/;"	f
check_t_foreach	test/control.jl	/^function check_t_foreach(; expected_used_threads::Int = nthreads(), flags...)::Nothing$/;"	f
check_used_all_threads_of_processes	test/control.jl	/^function check_used_all_threads_of_processes($/;"	f
check_used_single_thread_of_processes	test/control.jl	/^function check_used_single_thread_of_processes($/;"	f
clear	src/storage.jl	/^    clear::Union{Function,Nothing}$/;"	g	struct:LocalStorage
clear	src/storage.jl	/^    clear::Union{Function,Nothing}$/;"	g	struct:Storage.GlobalStorage
clear!	src/storage.jl	/^function clear!(storage::GlobalStorage)::Nothing$/;"	f
clear!	src/storage.jl	/^function clear!(storage::LocalStorage, thread_id::Int = 0)::Nothing$/;"	f
clear!	src/storage.jl	/^function clear!(storage::ParallelStorage)::Nothing$/;"	f
clear!	test/control.jl	/^function clear!(context_trackers::ContextTrackers)::Nothing$/;"	f
clear!	test/control.jl	/^function clear!(trackers::Trackers)::Nothing$/;"	f
clear_per_process!	src/storage.jl	/^function clear_per_process!(storage::ParallelStorage, name::String)::Nothing$/;"	f
clear_per_step!	src/storage.jl	/^function clear_per_step!(storage::ParallelStorage, name::String, thread_id = 0)::Nothing$/;"	f
clear_per_thread!	src/storage.jl	/^function clear_per_thread!(storage::ParallelStorage, name::String, thread_id = 0)::Nothing$/;"	f
close	src/distributed_channels.jl	/^function close(thread_safe_channel::ThreadSafeRemoteChannel)::Any$/;"	f
compute_used_threads_of_processes	src/control.jl	/^function compute_used_threads_of_processes($/;"	f	module:Control
copy	src/storage.jl	/^Base.copy(storage::GlobalStorage) = GlobalStorage($/;"	f	module:Base
d_foreach	src/control.jl	/^function d_foreach($/;"	f	module:Control
d_foreach_more_than_nprocs	src/control.jl	/^function d_foreach_more_than_nprocs($/;"	f	module:Control
d_foreach_up_to_nprocs	src/control.jl	/^function d_foreach_up_to_nprocs($/;"	f	module:Control
default_batch_factor	src/control.jl	/^const default_batch_factor = 4$/;"	c	module:Control
default_distribution	src/control.jl	/^const default_distribution = MaximizeProcesses$/;"	c	module:Control
default_minimal_batch	src/control.jl	/^const default_minimal_batch = 1$/;"	c	module:Control
default_simd	src/control.jl	/^const default_simd = false$/;"	c	module:Control
drain_locks	src/distributed_locks.jl	/^function drain_locks()::Nothing$/;"	f
drain_logging	src/distributed_logging.jl	/^function drain_logging()::Nothing$/;"	f	module:DistributedLogging
dt_foreach	src/control.jl	/^function dt_foreach($/;"	f	module:Control
dt_foreach_maximize_processes	src/control.jl	/^function dt_foreach_maximize_processes($/;"	f	module:Control
dt_foreach_minimize_processes	src/control.jl	/^function dt_foreach_minimize_processes($/;"	f	module:Control
fetch	src/distributed_channels.jl	/^function fetch(thread_safe_channel::ThreadSafeRemoteChannel{T}, value)::Any where {T}$/;"	f
finalize	src/control.jl	/^function finalize($/;"	f	module:Control
finalize_process	test/control.jl	/^@everywhere function finalize_process(storage::ParallelStorage)::Nothing$/;"	f
foreach_storage	test/control.jl	/^function foreach_storage()::ParallelStorage$/;"	f
forget!	src/storage.jl	/^function forget!(storage::ParallelStorage)::Nothing$/;"	f
forget_locks	src/distributed_locks.jl	/^function forget_locks()::Nothing$/;"	f
forget_per_process!	src/storage.jl	/^function forget_per_process!(storage::ParallelStorage, name::String)::Nothing$/;"	f
forget_per_step!	src/storage.jl	/^function forget_per_step!(storage::ParallelStorage, name::String)::Nothing$/;"	f
forget_per_thread!	src/storage.jl	/^function forget_per_thread!(storage::ParallelStorage, name::String)::Nothing$/;"	f
get_lock	src/storage.jl	/^function get_lock(storage::ParallelStorage, name::String)::AbstractLock$/;"	f
get_per_process	src/storage.jl	/^function get_per_process(storage::ParallelStorage, name::String)::Any$/;"	f
get_per_step	src/storage.jl	/^function get_per_step($/;"	f
get_per_thread	src/storage.jl	/^function get_per_thread($/;"	f
get_value	src/storage.jl	/^function get_value(storage::GlobalStorage)::Any$/;"	f
get_value	src/storage.jl	/^function get_value(storage::LocalStorage, thread_id::Int = threadid())::Any$/;"	f
handle_message	src/distributed_logging.jl	/^function handle_message($/;"	f
has_per_process	src/storage.jl	/^function has_per_process(storage::ParallelStorage, name::String)::Bool$/;"	f
has_per_step	src/storage.jl	/^function has_per_step(storage::ParallelStorage, name::String;)::Bool$/;"	f
has_per_thread	src/storage.jl	/^function has_per_thread(storage::ParallelStorage, name::String;)::Bool$/;"	f
increment_resets!	test/control.jl	/^@everywhere function increment_resets!(context::OperationContext)::Nothing$/;"	f
isready	src/distributed_channels.jl	/^function isready(thread_safe_channel::ThreadSafeRemoteChannel{T})::Bool where {T}$/;"	f
launched	src/launched.jl	/^function launched()::Nothing$/;"	f	module:Launched
local_lock	src/distributed_channels.jl	/^    local_lock::Union{ReentrantLock,Nothing}$/;"	g	struct:DistributedChannels.ThreadSafeRemoteChannel
lock	src/storage.jl	/^    lock::ReentrantLock$/;"	g	struct:Storage.GlobalStorage
log_channel	src/distributed_logging.jl	/^    log_channel::AbstractChannel{Union{Nothing,Array{UInt8,1}}}$/;"	g	struct:DistributedLogging.DistributedLogger
make	src/storage.jl	/^    make::Union{Type,Function,Nothing}$/;"	g	struct:Storage.GlobalStorage
make	src/storage.jl	/^    make::Union{Type,Function}$/;"	g	struct:LocalStorage
message_limits	src/distributed_logging.jl	/^    message_limits::Dict{Any,Int}$/;"	g	struct:DistributedLogging.DistributedLogger
min_enabled_level	src/distributed_logging.jl	/^min_enabled_level(logger::DistributedLogger) = begin$/;"	f
min_level	src/distributed_logging.jl	/^    min_level::LogLevel$/;"	g	struct:DistributedLogging.DistributedLogger
new_context_trackers	test/control.jl	/^function new_context_trackers()::ContextTrackers$/;"	f
new_tracking_array	test/control.jl	/^function new_tracking_array()::AbstractArray{Int,1}$/;"	f
next!	test/control.jl	/^@everywhere function next!(counter::Int)::Int$/;"	f
next_worker!	src/control.jl	/^function next_worker!()::Int$/;"	f	module:Control
next_workers!	src/control.jl	/^function next_workers!(workers_count::Int)::Array{Int,1}$/;"	f	module:Control
operation	src/distributed_locks.jl	/^    operation::Symbol$/;"	g	struct:DistributedLocks.LockRequest
pack	src/storage.jl	/^    pack::Union{Type,Function,Nothing}$/;"	g	struct:Storage.GlobalStorage
pack	src/storage.jl	/^function pack(storage::ParallelStorage)::ParallelStorage$/;"	f
pending	src/distributed_locks.jl	/^    pending::Array{Union{Channel{Bool},RemoteChannel{Channel{Bool}}},1}$/;"	g	struct:LockStatus
per_process	src/storage.jl	/^    per_process::Dict{String,GlobalStorage}$/;"	g	struct:ParallelStorage
per_process	test/control.jl	/^    per_process::ContextTrackers$/;"	g	struct:Trackers
per_step	src/storage.jl	/^    per_step::Dict{String,LocalStorage}$/;"	g	struct:ParallelStorage
per_step	test/control.jl	/^    per_step::ContextTrackers$/;"	g	struct:Trackers
per_step_resets	test/control.jl	/^    per_step_resets::AbstractArray{Int,1}$/;"	g	struct:Trackers
per_thread	src/storage.jl	/^    per_thread::Dict{String,LocalStorage}$/;"	g	struct:ParallelStorage
per_thread	test/control.jl	/^    per_thread::ContextTrackers$/;"	g	struct:Trackers
process	test/control.jl	/^    process::AbstractArray{Int,1}$/;"	g	struct:ContextTrackers
process	test/control.jl	/^    process::Int$/;"	g	struct:OperationContext
put!	src/distributed_channels.jl	/^function put!(thread_safe_channel::ThreadSafeRemoteChannel{T}, value)::Any where {T}$/;"	f
remote_channel	src/distributed_channels.jl	/^    remote_channel::Union{RemoteChannel{Channel{T}},Nothing}$/;"	g	struct:DistributedChannels.ThreadSafeRemoteChannel
request_response	src/distributed_channels.jl	/^function request_response(;$/;"	f
reset	src/storage.jl	/^    reset::Union{Function,Nothing}$/;"	g	struct:LocalStorage
reset_counters!	test/control.jl	/^function reset_counters!()::Nothing$/;"	f
reset_test!	test/control.jl	/^function reset_test!()::Nothing$/;"	f
reset_trackers!	test/control.jl	/^function reset_trackers!()::Nothing$/;"	f
resets	test/control.jl	/^    resets::Int$/;"	g	struct:OperationContext
response	src/distributed_locks.jl	/^    response::Union{Channel{Bool},RemoteChannel{Channel{Bool}}}$/;"	g	struct:DistributedLocks.LockRequest
run_foreach	test/control.jl	/^function run_foreach(foreach::Function; is_distributed::Bool, flags...)::Nothing$/;"	f
run_query	test/launch.jl	/^    function run_query()::Tuple{Int,AbstractArray{Int,1}}$/;"	f
run_step	test/control.jl	/^    run_step::ContextTrackers$/;"	g	struct:Trackers
s_foreach	src/control.jl	/^function s_foreach($/;"	f	module:Control
s_run_from_batches_channel	src/control.jl	/^function s_run_from_batches_channel($/;"	f	module:Control
scope	src/distributed_locks.jl	/^    scope::String$/;"	g	struct:DistributedLocks.LockRequest
send_batches	src/control.jl	/^function send_batches($/;"	f	module:Control
send_terminations	src/control.jl	/^function send_terminations($/;"	f	module:Control
serve	src/distributed_locks.jl	/^function serve(request::LockRequest)::Nothing$/;"	f
serve_counters	test/control.jl	/^function serve_counters()::Nothing$/;"	f
setup_locks	src/distributed_locks.jl	/^function setup_locks(size::Int = 4)::Nothing$/;"	f
setup_logging	src/distributed_logging.jl	/^function setup_logging($/;"	f	module:DistributedLogging
shouldlog	src/distributed_logging.jl	/^shouldlog(logger::DistributedLogger, level, _module, group, id) =$/;"	f
show_time	src/distributed_logging.jl	/^    show_time::Bool$/;"	g	struct:DistributedLogging.DistributedLogger
state	src/distributed_locks.jl	/^    state::Symbol$/;"	g	struct:LockStatus
steps_count	test/control.jl	/^const steps_count = 100$/;"	c
t_foreach	src/control.jl	/^function t_foreach($/;"	f	module:Control
t_foreach_more_than_nthreads	src/control.jl	/^function t_foreach_more_than_nthreads($/;"	f	module:Control
t_foreach_up_to_nthreads	src/control.jl	/^function t_foreach_up_to_nthreads($/;"	f	module:Control
t_run_batches	src/control.jl	/^function t_run_batches($/;"	f	module:Control
t_run_from_remote_batches_channel	src/control.jl	/^function t_run_from_remote_batches_channel($/;"	f	module:Control
take!	src/distributed_channels.jl	/^function take!(thread_safe_channel::ThreadSafeRemoteChannel{T})::Any where {T}$/;"	f
teardown_locks	src/distributed_locks.jl	/^function teardown_locks()::Nothing$/;"	f
teardown_logging	src/distributed_logging.jl	/^function teardown_logging()::Nothing$/;"	f	module:DistributedLogging
test_seen_lock	test/locks.jl	/^@everywhere function test_seen_lock()::Bool$/;"	f
test_set	test/runtests.jl	/^macro test_set(args...)$/;"	m
test_workers_count	test/launch.jl	/^const test_workers_count = 4$/;"	c
thread	test/control.jl	/^    thread::AbstractArray{Int,1}$/;"	g	struct:ContextTrackers
thread	test/control.jl	/^    thread::Int$/;"	g	struct:OperationContext
track_context	test/control.jl	/^@everywhere function track_context($/;"	f
tracked_step	test/control.jl	/^@everywhere function tracked_step(step_index::Int, storage::ParallelStorage)::Int$/;"	f
unique	test/control.jl	/^    unique::AbstractArray{Int,1}$/;"	g	struct:ContextTrackers
unique	test/control.jl	/^    unique::Int$/;"	g	struct:OperationContext
unpack	src/storage.jl	/^    unpack::Union{Type,Function,Nothing}$/;"	g	struct:Storage.GlobalStorage
unpack!	src/storage.jl	/^function unpack!(storage::ParallelStorage)::Nothing$/;"	f
value	src/storage.jl	/^    value::Any$/;"	g	struct:Storage.GlobalStorage
values	src/storage.jl	/^    values::Array{Any,1}$/;"	g	struct:LocalStorage
with_distributed_lock	src/distributed_locks.jl	/^function with_distributed_lock(f::Function, scope::String = "")::Any$/;"	f
with_per_process	src/storage.jl	/^function with_per_process(body::Function, storage::ParallelStorage, name::String)::Any$/;"	f
with_value	src/storage.jl	/^function with_value(body::Function, storage::GlobalStorage)::Any$/;"	f
